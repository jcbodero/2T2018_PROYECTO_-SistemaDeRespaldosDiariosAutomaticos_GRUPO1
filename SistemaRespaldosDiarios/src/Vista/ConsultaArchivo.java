/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.Archivos;
import Controlador.Conectar;
import Modelo.HiloServidorCaido;
import Modelo.variablesGlobales;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author JULIO
 */
public class ConsultaArchivo extends javax.swing.JFrame {

    /**
     * Creates new form ConsultaArchivo
     */
    private String fechaMenor;

    /**
     * Constructor de la ventana Consultar Archivo
     */
    public ConsultaArchivo() {
        initComponents();
        this.setLocationRelativeTo(null);
        actualizarTabla();
        this.setLocation(600, 220);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        comboYear = new javax.swing.JComboBox<>();
        contenedorArchivos = new java.awt.List();
        radioNombre = new javax.swing.JRadioButton();
        comboDia = new javax.swing.JComboBox<>();
        radioFecha = new javax.swing.JRadioButton();
        comboMes = new javax.swing.JComboBox<>();
        btnConsultar = new javax.swing.JButton();
        btnDescargar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBackground(new java.awt.Color(204, 0, 0));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Busqueda Archivo");

        comboYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AÃ±o", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2039" }));
        comboYear.setEnabled(false);

        contenedorArchivos.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N

        radioNombre.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        radioNombre.setForeground(new java.awt.Color(255, 255, 255));
        radioNombre.setText("Nombre");

        comboDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dia", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        comboDia.setEnabled(false);

        radioFecha.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        radioFecha.setForeground(new java.awt.Color(255, 255, 255));
        radioFecha.setText("Fecha");

        comboMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mes", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        comboMes.setEnabled(false);

        btnConsultar.setBackground(new java.awt.Color(255, 51, 51));
        btnConsultar.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        btnConsultar.setForeground(new java.awt.Color(255, 255, 255));
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnDescargar.setBackground(new java.awt.Color(255, 51, 51));
        btnDescargar.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        btnDescargar.setForeground(new java.awt.Color(255, 255, 255));
        btnDescargar.setText("Descargar");
        btnDescargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(contenedorArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(btnConsultar)
                                .addGap(46, 46, 46)
                                .addComponent(btnDescargar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(comboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioFecha)
                    .addComponent(radioNombre))
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(radioNombre))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConsultar)
                    .addComponent(btnDescargar))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *Funcion Autogenerada de la accion del boton consultar 
     * valida las posibles conbinaciones en los radiobuton seleccionado y las fechas seleccionadas
     * @author JULIO
     */
    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // --select NombreArchivoRespaldo from Evento where year(Fecha)='2019' and NombreArchivoRespaldo like '%ROUTER%' and Fecha >='2019-01-10 18:40:00.000000';
        //select Min(Fecha) from Evento;
        this.contenedorArchivos.removeAll();
        if (radioNombre.isSelected() && radioFecha.isSelected()) {

            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaMes(comboMes.getSelectedItem().toString(), 1);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() == 0) {
                consultaDia(comboDia.getSelectedItem().toString(), 1);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() != 0) {
                consultaYear(comboYear.getSelectedItem().toString(), 1);
            }

            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() != 0) {
                if (isFuturo(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "No Existen archivos de respaldos de fecha futuras: ");
                    return;
                }
                if (isAnticipado(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "Existen archivos de respaldos de configuraciÃ³n: " + this.fechaMenor);
                    return;
                }
                consultaFechaYNombre(comboDia.getSelectedItem().toString(), comboMes.getSelectedItem().toString(),
                        comboYear.getSelectedItem().toString());
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaPorNombre();
            }

        }
        if (!radioNombre.isSelected() && radioFecha.isSelected()) {

            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaMes(comboMes.getSelectedItem().toString(), 2);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() == 0) {
                consultaDia(comboDia.getSelectedItem().toString(), 2);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() != 0) {
                consultaYear(comboYear.getSelectedItem().toString(), 2);
            }
            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() != 0) {
                if (isFuturo(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "No Existen archivos de respaldos de fecha futuras: ");
                    return;
                }
                if (isAnticipado(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "Existen archivos de respaldos de configuraciÃ³n: " + this.fechaMenor);
                    return;
                }
                consultaFecha(comboDia.getSelectedItem().toString(), comboMes.getSelectedItem().toString(),
                        comboYear.getSelectedItem().toString());
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaPorNombre();
            }
        }
        if (radioNombre.isSelected() && !radioFecha.isSelected()) {

            consultaPorNombre();
        }
        if (!radioNombre.isSelected() && !radioFecha.isSelected()) {

            consultaAll();
        }


    }//GEN-LAST:event_btnConsultarActionPerformed

    /**
     *Funcion autogenerada del boton descargar verifica que un servidor no este caido
     * y descarga el archivo seleccionado.
     * @author JULIO
     */
    private void btnDescargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescargarActionPerformed

        if (HiloServidorCaido.ServerBaseDatosCaido || HiloServidorCaido.ServerFTPCaido) {
            JOptionPane.showMessageDialog(null, "Servidor Caido");
            return;
        }
        if (contenedorArchivos.getSelectedIndex() != -1) {
            this.descargar(contenedorArchivos.getSelectedItem());
            JOptionPane.showMessageDialog(null, "Archivo Descargado..............");
            Archivos.escribirDatos("Archivo Descargado" + "," + variablesGlobales.USUARIO_ACTIVO + ","
                    + contenedorArchivos.getSelectedItem(), "src/DocumentosGenerados/logs", true);
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione Archivo");
        }
    }//GEN-LAST:event_btnDescargarActionPerformed

    /**
     *Funcion que realiza la busqueda en la base de datos por mes ingresado
     * @author JULIO
     * @param seleccion 
     * @param mes
     */
    private void consultaMes(String mes, int seleccion) {
        String sql = "";
        if (seleccion == 1) {
            sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes
                    + "' and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%';";
        }
        if (seleccion == 2) {
            sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes + ";";
        }

        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    /**
     * Funcion que realiza la busqueda por dia seleccionado
     *@param dia
     * @param seleccion 
     * @author JULIO
     */
    private void consultaDia(String dia, int seleccion) {
        String sql = "";
        if (seleccion == 1) {
            sql = " select NombreArchivoRespaldo from Evento where day(Fecha)='" + dia
                    + "' and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%';";
        }
        if (seleccion == 2) {
            sql = " select NombreArchivoRespaldo from Evento where day(Fecha)='" + dia + ";";
        }
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }
    /**
     * Funcion que realiza la busqueda por aÃ±o seleccionado
     *@param year 
     * @param seleccion 
     * @author JULIO
     */
    private void consultaYear(String year, int seleccion) {
        String sql = "";
        if (seleccion == 1) {
            sql = " select NombreArchivoRespaldo from Evento where year(Fecha)='" + year
                    + "' and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%' and NombreArchivoRespaldo is not null;";
        }
        if (seleccion == 2) {
            sql = " select NombreArchivoRespaldo from Evento where year(Fecha)='" + year + " and NombreArchivoRespaldo is not null;";
        }
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    /**
     * Funcion que realiza la busqueda por fecha completa y nombre seleccionado
     *@param dia
     * @param mes
     * @param year
     * @param seleccion 
     * @author JULIO
     */

    private void consultaFechaYNombre(String dia, String mes, String year) {
        String sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes + "' and "
                + "day(Fecha)='" + dia + "'and year(Fecha)='" + year + "'"
                + "and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%' and NombreArchivoRespaldo is not null;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    /**
     * Funcion que realiza la busqueda por fecha copeta  seleccionado
     *@param dia
     *@param mes
     *@param year
     * @param seleccion 
     * @author JULIO
     */

    private void consultaFecha(String dia, String mes, String year) {
        String sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes + "' and "
                + "day(Fecha)='" + dia + "'and year(Fecha)='" + year + "'" + " and NombreArchivoRespaldo is not null;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    /**
     * Funcion que realiza la busqueda por nombre dispositivo seleccionado
     *
     * @author JULIO
     */

    private void consultaPorNombre() {
        String sql = " select NombreArchivoRespaldo from Evento where "
                + "NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%' ;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    /**
     * Funcion que realiza la busqueda por de todos los valores
     *
     * @author JULIO
     */

    private void consultaAll() {
        String sql = "select NombreArchivoRespaldo from Evento where NombreArchivoRespaldo is not null;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    /**
     * Funcion que verifica si la fecha es anticipada
     *@param fecha
     * @author JULIO
     */
    private Boolean isAnticipado(String fecha) {
        try {
            ResultSet menor = Conectar.Consulta("select Min(Fecha) from Evento where NombreArchivoRespaldo is not null;");
            menor.next();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date date1 = sdf.parse(fecha);
            Date date2 = sdf.parse(menor.getString(1).split(" ")[0]);
            this.fechaMenor = menor.getString(1).split(" ")[0];
            //date1 < date2, devuelve un valor mayor que 0
            //date2 > date1, devuelve un valor mayor que 0
            //date1 = date3, se mostrarÃ¡ un 0 en la consola
            return date1.compareTo(date2) < 0;

        } catch (ParseException | SQLException ex) {

        }
        return false;
    }

    /**
     * Funcion que verifica si la fecha es futura
     *@param fecha
     * @author JULIO
     */
    private Boolean isFuturo(String fecha) {
        try {
            ResultSet mayor = Conectar.Consulta("select Max(Fecha) from Evento where NombreArchivoRespaldo is not null;");
            mayor.next();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date date1 = sdf.parse(fecha);
            Date date2 = sdf.parse(mayor.getString(1).split(" ")[0]);
            //date1 < date2, devuelve un valor mayor que 0
            //date2 > date1, devuelve un valor mayor que 0
            //date1 = date3, se mostrarÃ¡ un 0 en la consola
            return date1.compareTo(date2) > 0;

        } catch (ParseException | SQLException ex) {

        }
        return false;
    }

    /**
     * Funcion que 
     *Habilita los selectores de dia mes y aÃ±o
     * @author JULIO
     */
    private void activarCombo() {
        comboYear.enable(true);
        comboMes.enable(true);
        comboDia.enable(true);
    }

    /**
     * Funcion que Desactiva los selectores de dia mes y aÃ±o
     *
     * @author JULIO
     */
    private void desactivarCombo() {
        comboYear.enable(false);
        comboMes.enable(false);
        comboDia.enable(false);
    }

    /**
     * Funcion que actualiza la seleccion de los radio button
     *
     * @author JULIO
     */
    private void actualizarTabla() {
        Timer timer = new Timer(2, (ActionEvent e) -> {
            if (radioNombre.isSelected() && !radioFecha.isSelected()) {
                desactivarCombo();
            }
            if (!radioNombre.isSelected() && !radioFecha.isSelected()) {
                desactivarCombo();
            }
            if (!radioNombre.isSelected() && radioFecha.isSelected()) {
                activarCombo();
            }
            if (radioNombre.isSelected() && radioFecha.isSelected()) {
                activarCombo();
            }

        });
        timer.start();
    }

    /**
     * Funcion que copia un archivo desde una ruta especificada hacia otra de  un archivo 
     * @author Cesar Navas
     * @return boolean
     * @param fromFile 
     * @param toFile 
     */
    private boolean copyFile(String fromFile, String toFile) {
        File origin = new File(fromFile);
        File destination = new File(toFile);
        if (origin.exists()) {
            try {
                InputStream in = new FileInputStream(origin);
                OutputStream out = new FileOutputStream(destination);
                // We use a buffer for the copy (Usamos un buffer para la copia).
                byte[] buf = new byte[1024];
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                in.close();
                out.close();
                return true;
            } catch (IOException ioe) {
                ioe.printStackTrace();
                return false;
            }
        } else {
            return false;
        }
    }

    /**
     * Funcion que Realiza la descarga de los archivos 
     *
     * @author JULIO
     */
    private void descargar(String Archivo) {
        String fromFile = "C:\\Users\\JULIO\\Documents\\NetBeansProjects\\2T2018_PROYECTO_SistemaDeRespaldosDiariosAutomaticos_GRUPO1\\SistemaRespaldosDiarios\\src\\DocumentosGenerados\\" + Archivo;
        String toFile = "C:\\Users\\JULIO\\Downloads\\" + Archivo;
        boolean result = copyFile(fromFile, toFile);
        System.out.println(result
                ? "Success! File copying (Ãxito! Fichero copiado)"
                : "Error! Failed to copy the file (Error! No se ha podido copiar el fichero)");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultaArchivo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnDescargar;
    private javax.swing.JComboBox<String> comboDia;
    private javax.swing.JComboBox<String> comboMes;
    private javax.swing.JComboBox<String> comboYear;
    private java.awt.List contenedorArchivos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton radioFecha;
    private javax.swing.JRadioButton radioNombre;
    // End of variables declaration//GEN-END:variables
}
