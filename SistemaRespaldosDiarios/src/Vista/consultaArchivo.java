/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.Conectar;
import Modelo.Fecha;
import Modelo.variablesGlobales;
import java.awt.event.ActionEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author JULIO
 */
public class consultaArchivo extends javax.swing.JFrame {

    /**
     * Creates new form consultaArchivo
     */
    private String fechaMenor;
    public consultaArchivo() {
        initComponents();
        this.setLocationRelativeTo(null);
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboYear = new javax.swing.JComboBox<>();
        comboMes = new javax.swing.JComboBox<>();
        comboDia = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        contenedorArchivos = new java.awt.List();
        btnConsultar = new java.awt.Button();
        btnDescargar = new java.awt.Button();
        radioNombre = new javax.swing.JRadioButton();
        radioFecha = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Busqueda Archivo");

        comboYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AÃ±o", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2039" }));
        comboYear.setEnabled(false);

        comboMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mes", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        comboMes.setEnabled(false);

        comboDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dia", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        comboDia.setEnabled(false);

        btnConsultar.setActionCommand("Consultar");
        btnConsultar.setLabel("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnDescargar.setActionCommand("Consultar");
        btnDescargar.setLabel("Descargar");
        btnDescargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescargarActionPerformed(evt);
            }
        });

        radioNombre.setText("Nombre");

        radioFecha.setText("Fecha");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(btnDescargar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(contenedorArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(comboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(radioFecha)))
                        .addGap(0, 25, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(radioNombre)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioNombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDescargar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
       // --select NombreArchivoRespaldo from Evento where year(Fecha)='2019' and NombreArchivoRespaldo like '%ROUTER%' and Fecha >='2019-01-10 18:40:00.000000';
        //select Min(Fecha) from Evento;
       
        if (radioNombre.isSelected() && radioFecha.isSelected()) {
            
            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaMes(comboMes.getSelectedItem().toString(),1);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() == 0) {
                consultaDia(comboDia.getSelectedItem().toString(),1);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() != 0) {
                consultaYear(comboYear.getSelectedItem().toString(),1);
            }

            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() != 0) {
                if (isFuturo(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "No Existen archivos de respaldos de fecha futuras: ");
                    return;
                }
                if (isAnticipado(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "Existen archivos de respaldos de configuraciÃ³n: " + this.fechaMenor);
                    return;
                }
                consultaFechaYNombre(comboDia.getSelectedItem().toString(), comboMes.getSelectedItem().toString(),
                        comboYear.getSelectedItem().toString());
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaPorNombre();
            }

        }
        if (!radioNombre.isSelected() && radioFecha.isSelected()) {

            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaMes(comboMes.getSelectedItem().toString(), 2);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() == 0) {
                consultaDia(comboDia.getSelectedItem().toString(), 2);
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() != 0) {
                consultaYear(comboYear.getSelectedItem().toString(), 2);
            }
            if (comboMes.getSelectedIndex() != 0 && comboDia.getSelectedIndex() != 0 && comboYear.getSelectedIndex() != 0) {
                if (isFuturo(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "No Existen archivos de respaldos de fecha futuras: ");
                    return;
                }
                if (isAnticipado(comboYear.getSelectedItem() + "-" + comboMes.getSelectedItem() + "-" + comboDia.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "Existen archivos de respaldos de configuraciÃ³n: " + this.fechaMenor);
                    return;
                }
                consultaFecha(comboDia.getSelectedItem().toString(), comboMes.getSelectedItem().toString(),
                        comboYear.getSelectedItem().toString());
            }
            if (comboMes.getSelectedIndex() == 0 && comboDia.getSelectedIndex() == 0 && comboYear.getSelectedIndex() == 0) {
                consultaAll();
            }
        }
        if(radioNombre.isSelected() && !radioFecha.isSelected()){
            
            consultaPorNombre();
        }
        if(!radioNombre.isSelected() && !radioFecha.isSelected()){
            
            consultaAll();
        }
        

    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnDescargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescargarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDescargarActionPerformed

    private void consultaMes(String mes, int seleccion) {
        String sql = "";
        if (seleccion == 1){
            sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes
                + "' and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%';";
        }
        if(seleccion == 2){
            sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes+";";
        }
        
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(consultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }
    private void consultaDia(String dia, int seleccion) {
        String sql = "";
        if (seleccion == 1){
            sql = " select NombreArchivoRespaldo from Evento where day(Fecha)='" + dia
                + "' and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%';";
        }
        if(seleccion == 2){
            sql = " select NombreArchivoRespaldo from Evento where day(Fecha)='" + dia +";";
        }
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(consultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }
    
    private void consultaYear(String year, int seleccion) {
        String sql = "";
        if (seleccion == 1){
            sql = " select NombreArchivoRespaldo from Evento where year(Fecha)='" + year
                + "' and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%' and NombreArchivoRespaldo is not null;";
        }
        if(seleccion == 2){
            sql = " select NombreArchivoRespaldo from Evento where year(Fecha)='" + year+" and NombreArchivoRespaldo is not null;";
        }
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(consultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    private void consultaFechaYNombre(String dia, String mes, String year) {
        String sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes + "' and "
                + "day(Fecha)='" + dia + "'and year(Fecha)='" + year + "'"
                + "and NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%' and NombreArchivoRespaldo is not null;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(consultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    private void consultaFecha(String dia, String mes, String year) {
        String sql = " select NombreArchivoRespaldo from Evento where month(Fecha)='" + mes + "' and "
                + "day(Fecha)='" + dia + "'and year(Fecha)='" + year + "'"+" and NombreArchivoRespaldo is not null;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(consultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    private void consultaPorNombre() {
        String sql = " select NombreArchivoRespaldo from Evento where "
                + "NombreArchivoRespaldo like '%" + variablesGlobales.DISPOSITIVO_ACTIVO + "%' ;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(consultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }

    private void consultaAll() {
        String sql = "select NombreArchivoRespaldo from Evento where NombreArchivoRespaldo is not null;";
        ResultSet res = Conectar.Consulta(sql);
        try {
            try {
                while (res.next()) {
                    String texto = res.getString(1);
                    if (texto.length() != 0) {
                        contenedorArchivos.add(res.getString(1));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(consultaArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NullPointerException e) {
        }

    }
    private Boolean isAnticipado(String fecha) {
        String actual = new Fecha().imprimirFecha().split(" ")[0];

        try {
            ResultSet menor = Conectar.Consulta("select Min(Fecha) from Evento where NombreArchivoRespaldo is not null;");
            menor.next();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date date1 = sdf.parse(fecha);
            Date date2 = sdf.parse(menor.getString(1).split(" ")[0]);
            this.fechaMenor = menor.getString(1).split(" ")[0];
            //date1 < date2, devuelve un valor mayor que 0
            //date2 > date1, devuelve un valor mayor que 0
            //date1 = date3, se mostrarÃ¡ un 0 en la consola
            return date1.compareTo(date2) < 0;

        } catch (ParseException | SQLException ex) {

        }
        return false;
    }

    private Boolean isFuturo(String fecha) {
        try {
            ResultSet mayor = Conectar.Consulta("select Max(Fecha) from Evento where NombreArchivoRespaldo is not null;");
            mayor.next();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date date1 = sdf.parse(fecha);
            Date date2 = sdf.parse(mayor.getString(1).split(" ")[0]);
            //date1 < date2, devuelve un valor mayor que 0
            //date2 > date1, devuelve un valor mayor que 0
            //date1 = date3, se mostrarÃ¡ un 0 en la consola
            return date1.compareTo(date2)> 0;

        } catch (ParseException | SQLException ex) {

        }
        return false;
    }
    private void  activarCombo(){
        comboYear.enable(true);
        comboMes.enable(true);
        comboDia.enable(true);
    }
    private void  desactivarCombo(){
        comboYear.enable(false);
        comboMes.enable(false);
        comboDia.enable(false);
    }
    private void actualizarTabla() {
        Timer timer = new Timer(2, (ActionEvent e) -> {
            if(radioNombre.isSelected() && !radioFecha.isSelected()){
                desactivarCombo();
            }
            if(!radioNombre.isSelected() && !radioFecha.isSelected()){
                desactivarCombo();
            }
            if(!radioNombre.isSelected() && radioFecha.isSelected()){
                activarCombo();
            }
            if (radioNombre.isSelected() && radioFecha.isSelected()) {
                activarCombo();
            }
            
            
        });
        timer.start();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(consultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(consultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(consultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(consultaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new consultaArchivo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnConsultar;
    private java.awt.Button btnDescargar;
    private javax.swing.JComboBox<String> comboDia;
    private javax.swing.JComboBox<String> comboMes;
    private javax.swing.JComboBox<String> comboYear;
    private java.awt.List contenedorArchivos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton radioFecha;
    private javax.swing.JRadioButton radioNombre;
    // End of variables declaration//GEN-END:variables
}
